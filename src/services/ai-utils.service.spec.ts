import { Test, TestingModule } from '@nestjs/testing';

import { AiUtilsService } from './ai-utils.service';

describe('AiUtilsService', () => {
  let app: TestingModule;
  let aiUtilsService: AiUtilsService;

  beforeAll(async () => {
    app = await Test.createTestingModule({
      imports: [],
      providers: [AiUtilsService],
    }).compile();

    aiUtilsService = app.get<AiUtilsService>(AiUtilsService);
  });

  describe('extractCodeBlocks', () => {
    it('should extract and parse Object with JSON in code blocks - with line breaks', () => {
      const input = [
        {
          generated_text:
            'Here is the country information:\n```json\n{"name":{"en":"France","fr":"France"},"cca2":"FR","cca3":"FRA","flag":"üá´üá∑"}\n```',
        },
      ];

      const result = aiUtilsService.extractCodeBlocks(input);

      expect(result).toEqual([
        {
          name: {
            en: 'France',
            fr: 'France',
          },
          cca2: 'FR',
          cca3: 'FRA',
          flag: 'üá´üá∑',
        },
      ]);
    });

    it('should extract and parse Object with JSON in code blocks - without line breaks', () => {
      const generated_text =
        'Le pays correspondant √† la distillerie de Togouchi Premium Whisky Japonais est le Japon avec ces codes : ' +
        '```json' +
        '{' +
        '  "name": {' +
        '    "en": "Japan",' +
        '    "fr": "Japon"' +
        '  },' +
        '  "cca2": "JP",' +
        '  "cca3": "JPN",' +
        '  "flag": "üáØüáµ",' +
        '  "sub": null' +
        '}' +
        '```';
      const input = [
        {
          generated_text,
        },
      ];

      const result = aiUtilsService.extractCodeBlocks(input);

      expect(result).toEqual([
        {
          name: {
            en: 'Japan',
            fr: 'Japon',
          },
          cca2: 'JP',
          cca3: 'JPN',
          flag: 'üáØüáµ',
          sub: null,
        },
      ]);
    });

    it('should return {} when input is ```json {}```', () => {
      const input = [
        {
          generated_text: '```json {}```',
        },
      ];

      const result = aiUtilsService.extractCodeBlocks(input);

      expect(result).toEqual([{}]);
    });

    it('should return ? when input when there are 2 code blocks', () => {
      const input = [
        {
          generated_text:
            '```json {}``` AND ```json\n{"name":{"en":"France","fr":"France"},"cca2":"FR","cca3":"FRA","flag":"üá´üá∑"}\n```',
        },
      ];

      const result = aiUtilsService.extractCodeBlocks(input);

      expect(result).toEqual([
        {},
        {
          name: { en: 'France', fr: 'France' },
          cca2: 'FR',
          cca3: 'FRA',
          flag: 'üá´üá∑',
        },
      ]);
    });

    it('should return null when input is null or undefined', () => {
      const nullResult = aiUtilsService.extractCodeBlocks(null);
      expect(nullResult).toBeNull();

      const undefinedResult = aiUtilsService.extractCodeBlocks(undefined);
      expect(undefinedResult).toBeNull();
    });
  });

  describe('mergeWithTolerance', () => {
    it('merges two strings with perfect overlap', () => {
      const s1 = 'abc def ghi jkl';
      const s2 = 'ghi jkl mno pqr';
      const result = aiUtilsService.mergeWithTolerance(s1, s2);
      expect(result).toBe('abc def ghi jkl mno pqr');
    });

    it('returns concatenation if no overlap', () => {
      const s1 = 'hello world';
      const s2 = 'goodbye moon';
      const result = aiUtilsService.mergeWithTolerance(s1, s2);
      expect(result).toBe('hello world goodbye moon');
    });

    it('ignores small mismatches at start and end with tolerance', () => {
      const s1 = 'abc def ghi jkl extra noise';
      const s2 = 'noise ghi jkl mno pqr';
      const result = aiUtilsService.mergeWithTolerance(s1, s2);
      expect(result).toBe('abc def ghi jkl mno pqr');
    });

    it('ignores small mismatches at start and end with tolerance - inverted', () => {
      const s1 = 'noise ghi jkl mno pqr';
      const s2 = 'abc def ghi jkl extra noise';
      const result = aiUtilsService.mergeWithTolerance(s1, s2);
      expect(result).toBe('noise ghi jkl extra noise');
    });

    it('merges when overlap is at the very end and start', () => {
      const s1 = 'overlap test string end';
      const s2 = 'string end and more text';
      const result = aiUtilsService.mergeWithTolerance(s1, s2);
      expect(result).toBe('overlap test string end and more text');
    });

    it('handles empty strings', () => {
      expect(aiUtilsService.mergeWithTolerance('', '')).toBe('');
      expect(aiUtilsService.mergeWithTolerance('abc', '')).toBe('abc');
      expect(aiUtilsService.mergeWithTolerance('', 'def')).toBe('def');
    });

    it('returns s1 + s2 if overlap is zero', () => {
      const s1 = 'abcdef';
      const s2 = 'ghijkl';
      const result = aiUtilsService.mergeWithTolerance(s1, s2);
      expect(result).toBe('abcdef ghijkl');
    });

    it('merges with ***', () => {
      const s1 = 'some text with trailing noise ***';
      const s2 = '*** with trailing noise and more';
      const result = aiUtilsService.mergeWithTolerance(s1, s2);
      expect(result).toBe('some text with trailing noise and more');
    });

    it('merges strings with partial overlaps - with ```json', () => {
      const input = [
        `et juteux √©volue vers une finale l√©g√®re sur l'amande et la noisette.</p>",\n  "description": "<p>Cr√©√©e en 2015, l‚Äôentreprise Les Bienheureux r√©volutionne `,
        ` '\`\`\`json\n  "description": "<p>Cr√©√©e en 2015, l‚Äôentreprise Les Bienheureux r√©volutionne le milieu des alcools et spiritueux par son esprit d‚Äôinnovation, son souci d‚Äôexcellence, ses valeurs √©thiques`,
      ];

      const expected = `et juteux √©volue vers une finale l√©g√®re sur l'amande et la noisette.</p>", "description": "<p>Cr√©√©e en 2015, l‚Äôentreprise Les Bienheureux r√©volutionne le milieu des alcools et spiritueux par son esprit d‚Äôinnovation, son souci d‚Äôexcellence, ses valeurs √©thiques`;
      expect(aiUtilsService.mergeWithTolerance(input[0], input[1])).toBe(
        expected,
      );
    });

    it('merges overlapping completions - simple inputs', () => {
      const input = [
        'Le whisky est produit en √âcosse. Il est connu pour sa richesse',
        'Il est connu pour sa richesse en ar√¥mes et sa complexit√©.',
      ];
      const expected =
        'Le whisky est produit en √âcosse. Il est connu pour sa richesse en ar√¥mes et sa complexit√©.';
      expect(aiUtilsService.mergeWithTolerance(input[0], input[1])).toBe(
        expected,
      );
    });
  });

  describe('mergeAllWithTolerance', () => {
    it('merges multiple fragments with overlap using mergeAllWithTolerance', () => {
      const fragments = [
        'abc def ghi jkl extra noise',
        'noise ghi jkl mno pqr',
        'mno pqr stu vwx',
        'stu vwx yz the-end',
      ];

      const result = aiUtilsService.mergeAllWithTolerance(fragments);
      expect(result).toBe('abc def ghi jkl mno pqr stu vwx yz the-end');
    });

    it('merges strings with partial overlaps', () => {
      const inputs = [
        '<p>Cr√©√©e en 2015, l‚Äôentreprise Les Bienheureux r√©volutionne le milieu des alcools',
        'r√©volutionne le milieu des alcools et spiritueux par son esprit d‚Äôinnovation',
        'par son esprit d‚Äôinnovation, son souci d‚Äôexcellence, ses valeurs √©thiques',
      ];

      const expected =
        '<p>Cr√©√©e en 2015, l‚Äôentreprise Les Bienheureux r√©volutionne le milieu des alcools et spiritueux par son esprit d‚Äôinnovation, son souci d‚Äôexcellence, ses valeurs √©thiques';

      expect(aiUtilsService.mergeAllWithTolerance(inputs)).toBe(expected);
    });

    it('should merge multiple JSON fragments correctly', () => {
      const fragments = [
        '```json\n' +
          '{\n' +
          '  "metaTitle": "Bellevoye Blanc",\n' +
          `  "metaDescription": "Whisky fran√ßais triple malt",\n` +
          `  "about": "<p>UN WHISKY TRIPLE MALT FRAN√áAIS : 100 % fran√ßais et salu√© par la critique au niveau international</p>",\n` +
          '  "description": "<p>Phrase1. Phrase2.</p><p>Phrase3. Phrase4.</p><p>Debut de phrase',
        '```json\n' +
          '  "description": "<p>Phrase1. Phrase2.</p><p>Phrase3. Phrase4.</p><p>Debut de phrase Suite Phrase.</p><p>Derni√®re phrase.</p>",\n' +
          '  "producer": "<p>Lanc√© il y a six ans en circuit traditionnel, le whisky Bellevoye est servi √† l‚Äô√âlys√©e et sur les vols Air France.</p>"\n' +
          '}\n' +
          '```',
      ];

      const expectedMerged =
        '```json' +
        ' {' +
        ' "metaTitle": "Bellevoye Blanc",' +
        ` "metaDescription": "Whisky fran√ßais triple malt",` +
        ` "about": "<p>UN WHISKY TRIPLE MALT FRAN√áAIS : 100 % fran√ßais et salu√© par la critique au niveau international</p>",` +
        ' "description": "<p>Phrase1. Phrase2.</p><p>Phrase3. Phrase4.</p><p>Debut de phrase Suite Phrase.</p><p>Derni√®re phrase.</p>",' +
        ' "producer": "<p>Lanc√© il y a six ans en circuit traditionnel, le whisky Bellevoye est servi √† l‚Äô√âlys√©e et sur les vols Air France.</p>"' +
        ' } ' +
        '```';

      const result = aiUtilsService.mergeAllWithTolerance(fragments);

      const descriptionMatches = result.match(/"description"\s*:/g) || [];
      expect(descriptionMatches.length).toBe(1);

      const jsonBlockMatches = result.match(/```json[\s\S]*?```/g) || [];
      expect(jsonBlockMatches.length).toBe(1);

      expect(result).toBe(expectedMerged);
    });

    it('should merge multiple JSON fragments correctly - with array in json', () => {
      const fragments = [
        '```json\n' +
          '{\n' +
          '  "details": [\n' +
          '    { "legend": "Marque", "value": "Bellevoye" },\n' +
          '    { "legend": "Type", "value": "Whisky Triple Malt" },\n' +
          '    { "legend": "Volume", "value": "70 cl" },\n' +
          '    { "legend": "Degr√©", "value": "40%" },\n' +
          '    { "legend": "Saveur", "value": "Fruits secs, √©pices, miel" },\n' +
          '    { "legend": "Pays", "value": "France" },\n' +
          '    { "legend": "Sp',
        '```json\n' +
          '    { "legend": "Sp√©cificit√©", "value": "Affin√© en f√ªt de Sauternes" },\n' +
          `    { "legend": "R√©compenses", "value": "M√©dailles d'or internationales" }\n` +
          '  ]\n' +
          '}\n' +
          '```',
      ];

      const expectedMerged =
        '```json' +
        ' {' +
        ' "details": [' +
        ' { "legend": "Marque", "value": "Bellevoye" },' +
        ' { "legend": "Type", "value": "Whisky Triple Malt" },' +
        ' { "legend": "Volume", "value": "70 cl" },' +
        ' { "legend": "Degr√©", "value": "40%" },' +
        ' { "legend": "Saveur", "value": "Fruits secs, √©pices, miel" },' +
        ' { "legend": "Pays", "value": "France" },' +
        ' { "legend": "Sp√©cificit√©", "value": "Affin√© en f√ªt de Sauternes" },' +
        ` { "legend": "R√©compenses", "value": "M√©dailles d'or internationales" }` +
        ' ]' +
        ' } ' +
        '```';

      const result = aiUtilsService.mergeAllWithTolerance(fragments);

      const descriptionMatches = result.match(/"details"\s*:/g) || [];
      expect(descriptionMatches.length).toBe(1);

      const jsonBlockMatches = result.match(/```json[\s\S]*?```/g) || [];
      expect(jsonBlockMatches.length).toBe(1);

      expect(result).toBe(expectedMerged);
    });

    it('should merge multiple JSON fragments correctly - with array in json - 2', () => {
      const fragments = [
        '```json\n' +
          '{\n' +
          '  "details": [\n' +
          '    { "legend": "Marque", "value": "Dalwhinnie"',
        '```json\n' +
          '{ "legend": "Marque", "value": "Dalwhinnie" },\n' +
          '{ "legend": "Type", "value": "Whisky Single Malt" },\n' +
          '{ "legend": "Volume", "value": "70 cl" }\n' +
          '  ]\n' +
          '}\n' +
          '```',
      ];

      const expectedMerged =
        '```json' +
        ' {' +
        ' "details": [' +
        ' { "legend": "Marque", "value": "Dalwhinnie" },' +
        ' { "legend": "Type", "value": "Whisky Single Malt" },' +
        ' { "legend": "Volume", "value": "70 cl" }' +
        ' ]' +
        ' } ' +
        '```';

      const result = aiUtilsService.mergeAllWithTolerance(fragments);

      const descriptionMatches = result.match(/"details"\s*:/g) || [];
      expect(descriptionMatches.length).toBe(1);

      const jsonBlockMatches = result.match(/```json[\s\S]*?```/g) || [];
      expect(jsonBlockMatches.length).toBe(1);

      expect(result).toBe(expectedMerged);
    });
  });
});
